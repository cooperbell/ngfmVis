% NGFMVISPARAM A GUI for providing input arguments to ngfmVis
function fig = ngfmVisParam()
    % create figure
    fig = uifigure('AutoResizeChildren', 'off', 'Resize', 'off', ...
        'Name', 'NgfmVis Input Parameters', 'Position', [100 100 640 480]);
    S.figure = fig;

    % Add grid layout to figure
    GridLayout = uigridlayout('Parent', fig, 'RowHeight', {'1x'}, ...
        'ColumnWidth', {12, '1x'}, 'ColumnSpacing', 0, 'RowSpacing', 0, ...
        'Padding', [0 0 0 0]);

    leftPanel = uipanel(GridLayout);
    leftPanel.Layout.Row = 1;
    leftPanel.Layout.Column = 2;

    % Create Page title 
    uilabel('Parent', leftPanel, 'Text', 'Input Parameters', ...
        'FontSize', 24, 'Position', [230 430 250 40]);
    
    % Create Input Label
    uilabel('Parent', leftPanel, 'Text', {'Input: '; ''}, ...
        'Position', [35 385 40 22]);
    
    % Create Input serialDropdown
    inputDropDown = uidropdown('Parent', leftPanel, ...
        'Items', {'Serial', 'File'}, 'ValueChangedFcn', @CheckValue, ...
        'Value', 'File', 'Position', [35 364 100 22]);
    S.inputDropDown = inputDropDown;
    
    % Create Source Label
    uilabel('Parent', leftPanel, 'Text', 'Source:', ...
        'Position', [35 302 50 22]);

    % Create Source Edit Field
    sourceEditField = uieditfield('Parent', leftPanel, ...
        'Position',[35 281 130 22]);
    S.sourceEditField = sourceEditField;

    % Create browse button
    browseButton = uibutton('Parent', leftPanel, 'Text', 'Browse', ...
        'ButtonPushedFcn', @SourceBrowseButton, 'Position', [209 281 100 22]);
    S.browseButton = browseButton;

    % Create Log to Label
    uilabel('Parent', leftPanel, 'Text', 'Log to:', ...
        'Position', [39 224 47 22]);

    % Create logTo Edit Field
    logToEditField = uieditfield('Parent', leftPanel, ...
        'Position', [35 203 130 22]);
    S.logToEditField = logToEditField;
    
    % create log to supporting text
    uilabel('Parent', leftPanel, 'FontAngle', 'italic', ...
        'Text', 'Leave empty for autogenerated name', ...
        'Position', [37 180 220 22]);
    
    % Create button for not logging
    uibutton('Parent', leftPanel, 'ButtonPushedFcn', @noLogButtonCallback, ...
        'Text', "Don't Log", 'Position', [209 203 100 22]);
    
    % Create serial dropdown
    serialDropdown = uidropdown('Parent', leftPanel, 'Visible', 'off', ...
        'Position', [35 281 130 22]);
    S.serialDropdown = serialDropdown;

    % Create StartButton
    uibutton('Parent', leftPanel, 'ButtonPushedFcn', @StartButtonPushed, ...
        'Text', 'Start', 'Position', [35 49 76 22]);
    
    % save for use in callbacks
    guidata(S.figure, S)
    
    drawnow;
end

function SourceBrowseButton(hObject, ~)
% SOURCEBROWSEBUTTON Callback function for browse button
    handles = guidata(hObject);
    handles.figure.Visible = 'off'; 

    [FileName,FilePath]= uigetfile('*.txt*');
    if (FileName ~= 0 & FileName ~= "")
        sourceFilePath = fullfile(FilePath, FileName);
        handles.sourceEditField.Value = sourceFilePath;
    end
    handles.figure.Visible = 'on';
end

function noLogButtonCallback(hObject, ~)
% NOLOGBUTTONCALLBACK don't log button pressed
    handles = guidata(hObject);
    handles.logToEditField.Value = 'null';
end

function CheckValue(hObject, ~)
% CHECKVALUE Value changed function: inputDropDown
    handles = guidata(hObject);

    if(strcmp(handles.inputDropDown.Value, 'Serial'))
        handles.sourceEditField.Visible = false;
        handles.browseButton.Visible = false;
        handles.serialDropdown.Visible = true;
        handles.serialDropdown.Items = seriallist;
    else
        handles.serialDropdown.Visible = false;
        handles.sourceEditField.Visible = true;
        handles.browseButton.Visible = true;
    end
end

function StartButtonPushed(hObject, ~)
% STARTBUTTONPUSHED Button pushed function: StartButton
    handles = guidata(hObject);
    inputSelect = handles.inputDropDown.Value;
    if(strcmp(inputSelect, 'Serial'))
        source = handles.serialDropdown.Value;
    else
        source = handles.sourceEditField.Value;
    end
    
    if (~isempty(source))
        logTo = handles.logToEditField.Value;
        setappdata(handles.figure, 'params', ...
            {lower(inputSelect), source, logTo});
        handles.figure.Visible = 'off';
    else
        uialert(handles.figure, "You must select a source", "Error");
    end
end